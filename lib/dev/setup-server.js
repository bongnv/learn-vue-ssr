const setupDevServer = (app, onServerBundleReady) => {
  const webpack = require('webpack');
  const MFS = require('memory-fs');
  const path = require('path');
  const clientConfig = require('../../webpack.client.config');
  const serverConfig = require('../../webpack.server.config');

  let clientManifest;
  let serverBundle;

  const update = () => {
    if (serverBundle && clientManifest) {
      onServerBundleReady(serverBundle, clientManifest)
    }
  }

  // additional client entry for hot reload
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app];

  const clientCompiler = webpack(clientConfig);
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    serverSideRender: true,
    // logLevel: 'silent'
  });

  // setup dev middleware
  app.use(devMiddleware);

  // setup hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler));

  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    try {
      clientManifest = JSON.parse(devMiddleware.fileSystem.readFileSync(
        path.join(clientConfig.output.path, 'vue-ssr-client-manifest.json'),
        'utf-8'
      ))
    } catch (err) {
      console.log("err", err);
    }
    update()
  })

  // watch src files and rebuild SSR bundle
  global.console.log('Building SSR bundle...');
  const serverCompiler = webpack(serverConfig);
  const mfs = new MFS();

  serverCompiler.outputFileSystem = mfs;
  serverCompiler.watch({}, (error, stats) => {
    if (error) throw error;

    global.console.log(
      `${stats.toString({
        colors: true,
        modules: false,
        children: false,
        chunks: false,
        chunkModules: false,
      })}\n\n`
    );

    if (stats.hasErrors()) {
      console.error(stats.compilation.errors);
      throw new Error(stats.compilation.errors);
    }

    // read bundle generated by vue-ssr-webpack-plugin        
    serverBundle = JSON.parse(
      mfs.readFileSync(path.join(clientConfig.output.path, 'vue-ssr-server-bundle.json'), 'utf-8')
    );

    update();
  });
};

module.exports = setupDevServer;
